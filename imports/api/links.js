import { Mongo } from 'meteor/mongo'
import { Meteor } from 'meteor/meteor'
import SimpleSchema from 'simpl-schema'
import shortid from 'shortid'
import { Visits } from './visits'


export const Links = new Mongo.Collection('links')

export const schema = new SimpleSchema({
  _id: {
    type: String,
    min: 1,
  },
  name: {
    type: String,
    min: 1,
    label: 'Link Name',
  },
  url: {
    type: String,
    label: 'Link',
    regEx: SimpleSchema.RegEx.Url,
  },
  visible: {
    type: Boolean,
  },
})

const validationContext = schema.namedContext('linksContext')

export function getValidationContext() {
  return validationContext
}

if (Meteor.isServer) {
  Meteor.publish('links', function() {
    if(this.userId) {
      return Links.find({userId: this.userId})
    }
  })
}

Meteor.methods({
  'links.insert'(link) {
    if(!this.userId) {
      throw new Meteor.Error('not-authorized', 'User must be logged in')
    }
    validationContext.validate(link, { keys: ['url', 'name'] })
    Links.insert({
      _id: shortid.generate(), // A shorter id than is generated by Meteor
      userId: this.userId,
      url: link.url,
      name: link.name,
      visible: true,
      visitedCount: 0,
      lastVisitedAt: null,
    })
  },
  'links.setVisibility'(_id, visible) {
    if(!this.userId) {
      throw new Meteor.Error('not-authorized', 'User must be logged in')
    }
    validationContext.validate({ _id, visible })
    Links.update({ _id, userId: this.userId }, { $set: {visible} })
  },
  'links.trackVisit'(_id) {
    validationContext.validate({ _id })
    let visitedAt = new Date().getTime()
    console.log('visited: ', _id)
    Links.update({_id}, {
      $set: {
        lastVisitedAt: visitedAt,
      },
      $inc: {
        visitedCount: 1,
      },
    })
    Meteor.call('visits.insert', { _id, visitedAt })
  },
})
